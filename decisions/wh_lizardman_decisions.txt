decisions = {

	# slann_awaken_decision ={ #Wake up a sleeping Slann so he can defend lizarddom

		# potential = {
			# trait = lizardman_sleepingslann
			# NOT = { has_character_flag = waking_slann }
		# }

		# allow = {
			# trait = lizardman_sleepingslann
			# NOT = { has_character_flag = waking_slann }
			# OR = {
				# ai = no
				# any_war = {
					# NOT = { war_score = -20 } # we are losing a war
				# }
				# is_primary_war_defender = yes # we are being attacked!
				# custom_tooltip = {
					# text = lizardman_strong_winds_of_chaos
					# hidden_tooltip = {
						# 1 = {
							# check_variable = {
								# which = "doom_counter" value = 60 #The winds of chaos are strong
							# }
						# }
					# }
				# }
			# }

			# OR = {
				# AND = {
					# piety = 100
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 101
						# }
					# }
				# }
				# AND = {
					# piety = 200
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 201
						# }
					# }
				# }
				# AND = {
					# piety = 300
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 301
						# }
					# }
				# }
				# AND = {
					# piety = 400
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 401
						# }
					# }
				# }
				# AND = {
					# piety = 500
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 501
						# }
					# }
				# }
			# }
		# }

		# effect = {
			# remove_trait = lizardman_sleepingslann
			# set_character_flag = waking_slann
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 100
					# }
				# }
				# piety = -100
			# }
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 200
					# }
				# }
				# piety = -100
			# }
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 300
					# }
				# }
				# piety = -100
			# }
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 400
					# }
				# }
				# piety = -100
			# }
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 500
					# }
				# }
				# piety = -100
			# }
		# }

		# ai_will_do = {
			# factor = 0.5
			# modifier = {
				# factor = 2
				# any_war = {
					# NOT = { war_score = -50 }
				# }
			# }
			# modifier = {
				# factor = 2
				# is_primary_war_defender = yes
			# }
			# modifier = {
				# factor = 2
				# 1 = {
					# check_variable = {
						# which = "doom_counter" value = 90 #The winds of chaos are very strong
					# }
				# }
			# }
		# }
	# }

	# slann_fall_asleep_decision = { #put an awoken Slann back to sleep (to avoid negative events, of course)


		# potential = {
			# NOT = { trait = lizardman_sleepingslann }
			# has_character_flag = waking_slann
		# }

		# allow = {
			# NOT = { trait = lizardman_sleepingslann }
			# has_character_flag = waking_slann
		# }

		# effect = {
			# add_trait = lizardman_sleepingslann
			# piety = "sleep_level"
			# clr_character_flag = waking_slann
		# }

		# ai_will_do = {
			# factor = 1 #AI will always choose to fall asleep, unless the conditions below apply.
			# modifier = {
				# factor = 0
				# any_war = {
					# NOT = { war_score = 100 } #If we are woken up by a war, we'll not fall asleep until we've won (or the war is over)
				# }
			# }
			# modifier = {
				# factor = 0
				# is_primary_war_defender = yes # this should be redundant.
			# }
			# modifier = {
				# factor = 0
				# 1 = {
					# check_variable = {
						# which = "doom_counter" value = 30 #The winds of chaos are still too strong
					# }
				# }
			# }
		# }
	# }

	# deepen_contemplation_decision = { #Slip deeper into contemplation - get better events, but make it more costly to wake up
		# potential = {
			# trait = lizardman_sleepingslann
		# }

		# allow = {
			# trait = lizardman_sleepingslann
			# NOT = {
				# custom_tooltip = {
					# text = OnlyEveryFewYears
					# hidden_tooltip = {
						# has_character_flag = recent_sleep_change
					# }
				# }
			# }
			# NOT = {
				# check_variable = {
					# which = "sleep_level" value = 500
				# }
			# }
		# }

		# effect = {
			# change_variable = {
				# which = "sleep_level" value = 100
			# }
			# set_character_flag = recent_sleep_change
		# }

		# ai_will_do = {
			# factor = 0.01
			# modifier = {
				# factor = 2
				# trait = stressed
			# }
			# modifier = {
				# factor = 10
				# trait = depressed
			# }
			# modifier = {
				# factor = 50
				# trait = lunatic_3
			# }
			# modifier = {
				# factor = 30
				# trait = lunatic_2
			# }
			# modifier = {
				# factor = 20
				# trait = lunatic_1
			# }
			# modifier = {
				# factor = 2
				# trait = ill
			# }
			# modifier = {
				# factor = 5
				# trait = slothful
			# }
			# modifier = {
				# factor = 0
				# war = yes
			# }
			# modifier = {
				# factor = 2
				# NOT = {
					# trait = patient
				# }
			# }
			# modifier = {
				# factor = 2
				# NOT = {
					# trait = diligent
				# }
			# }
		# }
	# }

	# lighter_sleep_decision = { #Gradually open your mind - be tainted by Chaos, but make it easier to wake up
		# potential = {
				# trait = lizardman_sleepingslann
			# }

		# allow = {
			# trait = lizardman_sleepingslann
			# check_variable = {
				# which = "sleep_level" value = 1 #Don't wake up more than waking up
			# }
			# NOT = {
				# custom_tooltip = {
					# text = OnlyEveryFewYears
					# hidden_tooltip = {
						# has_character_flag = recent_sleep_change
					# }
				# }
			# }
		# }

		# effect = {
			# change_variable = {
				# which = "sleep_level" value = -100
			# }
			# set_character_flag = recent_sleep_change
		# }

		# ai_will_do = {
			# factor = 0.01
			# modifier = {
				# factor = 5
				# NOT = {
					# trait = stressed
				# }
			# }
			# modifier = {
				# factor = 5
				# NOT = {
					# trait = depressed
				# }
			# }
			# modifier = {
				# factor = 5
				# NOT = { trait = lunatic_3 }
				# NOT = { trait = lunatic_2 }
			# }
			# modifier = {
				# factor = 5
				# NOT = {
					# trait = ill
				# }
			# }
			# modifier = {
				# factor = 5
				# NOT = {
					# trait = slothful
				# }
			# }
			# modifier = {
				# factor = 5
				# trait = patient
			# }
			# modifier = {
				# factor = 5
				# trait = diligent
			# }
		# }
	# }

}

settlement_decisions = {
	cutback_jungle_decision = {
		ai = no # Handled by event
		filter = realm_owned
		ai_target_filter = owned
		only_playable = yes
		
		from_potential = {
		}

		potential = {
			is_capital = yes
			location = { has_province_modifier = lustria_jungle }
			OR = {
				holder_scope = { any_liege = { character = FROM } }
				holder_scope = { character = FROM } }
		}

		allow = {
			FROM = { wealth = 25 }
			location = {
				NOT = { has_province_modifier = recent_cutback }
				OR = {
					has_province_modifier = lustria_medium_jungle
					has_province_modifier = lustria_dense_jungle
					has_province_modifier = lustria_oppressive_jungle
				}
			}
			OR = {
				FROM = {
					in_command = no
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
				}
				FROM = { job_treasurer = {
							character = yes
							age = 16
							custom_tooltip = { text = IS_NOT_INCAPACITATED
								is_incapacitated_trigger = no }
							in_command = no }
					}
			}
		}

		effect = { location = { add_province_modifier =  { name = recent_cutback
									hidden = yes
									duration = 120 }
				}
			FROM = { character_event = { id = lizardman.261 } } #Choose who will cut back your jungle
		}

		ai_will_do = {
			factor = 0.1
			modifier = {
				factor = 0.1
				FROM = { NOT = { wealth = 50 } }
			}
			modifier = {
				factor = 2
				location = { has_province_modifier = lustria_dense_jungle }
			}
			modifier = {
				factor = 5
				location = { has_province_modifier = lustria_oppressive_jungle }
			}
		}
	}
}
